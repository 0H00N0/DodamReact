import React, { useState, useEffect } from 'react';
import styles from './MobileMenu.module.css';

/**
 * Î™®Î∞îÏùº ÌñÑÎ≤ÑÍ±∞ Î©îÎâ¥ Î∞è ÎìúÎ°úÏñ¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ïª¥Ìè¨ÎÑåÌä∏
 * ÌÑ∞Ïπò ÏπúÌôîÏ†ÅÏù∏ Ïù∏ÌÑ∞ÎûôÏÖòÍ≥º Ï†ëÍ∑ºÏÑ±ÏùÑ Í≥†Î†§Ìïú ÏÑ§Í≥Ñ
 */
const MobileMenu = ({ isOpen, onClose, onToggle }) => {
  const [expandedMenu, setExpandedMenu] = useState(null);

  const navigationItems = [
    {
      id: 'toys',
      title: 'Ïû•ÎÇúÍ∞ê',
      icon: 'üß∏',
      children: [
        { name: 'Î∏îÎ°ù/Ï°∞Î¶ΩÏôÑÍµ¨', icon: 'üß©' },
        { name: 'Ïù∏Ìòï/ÌîºÍ∑úÏñ¥', icon: 'üéé' },
        { name: 'Ïó≠Ìï†ÎÜÄÏù¥', icon: 'üë©‚Äç‚öïÔ∏è' },
        { name: 'ÍµêÏú°ÏôÑÍµ¨', icon: 'üìö' },
        { name: 'Î≥¥ÎìúÍ≤åÏûÑ', icon: 'üé≤' },
        { name: 'ÏïºÏô∏ÎÜÄÏù¥', icon: '‚öΩ' }
      ]
    },
    {
      id: 'age',
      title: 'Ïó∞Î†πÎ≥Ñ',
      icon: 'üë∂',
      children: [
        { name: '0-12Í∞úÏõî', icon: 'üçº' },
        { name: '12-24Í∞úÏõî', icon: 'üöº' },
        { name: '2-3ÏÑ∏', icon: 'üéà' },
        { name: '4-5ÏÑ∏', icon: 'üé®' },
        { name: '6-7ÏÑ∏', icon: 'üìù' },
        { name: '8ÏÑ∏ Ïù¥ÏÉÅ', icon: 'üéØ' }
      ]
    },
    {
      id: 'brand',
      title: 'Î∏åÎûúÎìú',
      icon: 'üè∑Ô∏è',
      children: [
        { name: 'Î†àÍ≥†', icon: 'üî¥' },
        { name: 'ÌîåÎ†àÏù¥Î™®Îπå', icon: 'üîµ' },
        { name: 'ÌÜ†Ïù¥Ïä§ÌÜ†Î¶¨', icon: 'ü§†' },
        { name: 'ÎîîÏ¶àÎãà', icon: 'üè∞' },
        { name: 'ÎΩÄÎ°úÎ°ú', icon: 'üêß' },
        { name: 'ÌÉÄÏöî', icon: 'üöå' }
      ]
    },
    {
      id: 'new',
      title: 'Ïã†ÏÉÅÌíà',
      icon: '‚≠ê',
      children: []
    }
  ];

  // Î©îÎâ¥Í∞Ä Ïó¥Î¶¥ Îïå body Ïä§ÌÅ¨Î°§ Î∞©ÏßÄ
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen]);

  // ESC ÌÇ§Î°ú Î©îÎâ¥ Îã´Í∏∞
  useEffect(() => {
    const handleEscapeKey = (event) => {
      if (event.key === 'Escape' && isOpen) {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscapeKey);
    return () => {
      document.removeEventListener('keydown', handleEscapeKey);
    };
  }, [isOpen, onClose]);

  const handleMenuToggle = (menuId) => {
    setExpandedMenu(expandedMenu === menuId ? null : menuId);
  };

  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  const handleLinkClick = () => {
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className={styles.mobileMenuOverlay} onClick={handleBackdropClick}>
      <div className={styles.mobileMenuDrawer}>
        {/* Ìó§Îçî */}
        <div className={styles.mobileMenuHeader}>
          <h2 className={styles.menuTitle}>Î©îÎâ¥</h2>
          <button
            className={styles.closeButton}
            onClick={onClose}
            aria-label="Î©îÎâ¥ Îã´Í∏∞"
          >
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              <line x1="18" y1="6" x2="6" y2="18"/>
              <line x1="6" y1="6" x2="18" y2="18"/>
            </svg>
          </button>
        </div>

        {/* ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î©îÎâ¥ */}
        <nav className={styles.mobileNav}>
          <ul className={styles.navList}>
            {navigationItems.map((item) => (
              <li key={item.id} className={styles.navItem}>
                {item.children.length > 0 ? (
                  <>
                    <button
                      className={`${styles.navButton} ${expandedMenu === item.id ? styles.expanded : ''}`}
                      onClick={() => handleMenuToggle(item.id)}
                      aria-expanded={expandedMenu === item.id}
                      aria-controls={`submenu-${item.id}`}
                    >
                      <span className={styles.navIcon}>{item.icon}</span>
                      <span className={styles.navText}>{item.title}</span>
                      <svg 
                        className={styles.expandIcon}
                        width="20" 
                        height="20" 
                        viewBox="0 0 24 24" 
                        fill="none" 
                        stroke="currentColor" 
                        strokeWidth="2"
                      >
                        <polyline points="6,9 12,15 18,9"/>
                      </svg>
                    </button>
                    
                    {/* ÏÑúÎ∏åÎ©îÎâ¥ */}
                    <div 
                      id={`submenu-${item.id}`}
                      className={`${styles.submenu} ${expandedMenu === item.id ? styles.open : ''}`}
                    >
                      <ul className={styles.submenuList}>
                        {item.children.map((child, index) => (
                          <li key={index} className={styles.submenuItem}>
                            <a
                              href={`/${item.id}/${child.name}`}
                              className={styles.submenuLink}
                              onClick={handleLinkClick}
                            >
                              <span className={styles.submenuIcon}>{child.icon}</span>
                              <span className={styles.submenuText}>{child.name}</span>
                            </a>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </>
                ) : (
                  <a
                    href={`/${item.id}`}
                    className={styles.navLink}
                    onClick={handleLinkClick}
                  >
                    <span className={styles.navIcon}>{item.icon}</span>
                    <span className={styles.navText}>{item.title}</span>
                  </a>
                )}
              </li>
            ))}
          </ul>
        </nav>

        {/* Ï∂îÍ∞Ä Î©îÎâ¥ */}
        <div className={styles.additionalMenu}>
          <div className={styles.utilityButtons}>
            <button className={styles.utilityButton} onClick={handleLinkClick}>
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <circle cx="11" cy="11" r="8"/>
                <path d="m21 21-4.35-4.35"/>
              </svg>
              <span>Í≤ÄÏÉâ</span>
            </button>
            
            <button className={styles.utilityButton} onClick={handleLinkClick}>
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M9 22a1 1 0 100-2 1 1 0 000 2z"/>
                <path d="M20 22a1 1 0 100-2 1 1 0 000 2z"/>
                <path d="M1 1h4l2.68 13.39a2 2 0 002 1.61h9.72a2 2 0 002-1.61L23 6H6"/>
              </svg>
              <span>Ïû•Î∞îÍµ¨Îãà</span>
            </button>
            
            <button className={styles.utilityButton} onClick={handleLinkClick}>
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2"/>
                <circle cx="12" cy="7" r="4"/>
              </svg>
              <span>ÎßàÏù¥ÌéòÏù¥ÏßÄ</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MobileMenu;